<?php

use Drupal\user\UserInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\user\Entity\User;
use Drupal\webform\WebformSubmissionForm;
use Drupal\node\Entity\Node;

use Drupal\Core\Mail\MailManagerInterface;

/**
 * Implements hook_user_login().
 */
function oxfam_user_login(UserInterface $account)
{
  $submission = $account->get('field_webform')->value;
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name !== 'user.reset.login') {
    if (!$account->hasRole('administrator')) {
      $webform_submission = WebformSubmission::load($submission);
      $data = $webform_submission->getData();
      //kint($data);
      if (isset($data['verified']) && $data['verified'] == "No") {
        $webform_submission->setElementData('verified', 'Yes');
        $webform_submission->setElementData('mailer', '');
        $webform_submission->save();
      }
      if (isset($data['payment_status']) && ($data['payment_status'] == 'Success')) {
        $redirect = new RedirectResponse(Url::fromUserInput('/user')->toString());
      } else {
        if (isset($data['payment_status']) && ($data['payment_status'] == 'Promise')) {
          $redirect = new RedirectResponse(Url::fromUserInput('/user')->toString());
        } else {
          $redirect = new RedirectResponse(Url::fromUserInput('/webform/registration/submissions/' . $submission . '/edit')->toString());
        }
      }
      $redirect->send();
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function oxfam_user_insert(Drupal\Core\Entity\EntityInterface $entity)
{
  $webform_id = 'registration';
  $webform = Webform::load($webform_id);

  $custom = $entity->get('field_corporate_name')->value;
  $url_components = parse_url($custom);
  parse_str($url_components['query'], $params);

  if (!empty($params['corporate'])) {
    $corporate = $params['corporate'];
  } else {
    $corporate = '';
  }

  if (!empty($custom)) {
    $custom = explode("?fullurl=", $custom);
    $customurl = str_replace("/node&", "?", $custom[1]);
    $customurl = rawurldecode($customurl);
  }

  $values = [
    'webform_id' => $webform->id(),
    'data' => [
      'first_name' => $entity->get('field_first_name')->value,
      'last_name' => $entity->get('field_last_name')->value,
      'mobile_number' => $entity->get('field_mobile_number')->value,
      'username' => $entity->getUsername(),
      'email_address' => $entity->getEmail(),
      'user_id' => $entity->id(),
      'verified' => 'No',
      'institution' => $corporate,
      'registration_url' => $customurl
    ],
    'uid' => $entity->id()
  ];
  $webform_submission = WebformSubmission::create($values);
  $webform_submission->save();

  $user = User::load($entity->id());

  $user->set('field_webform', $webform_submission->id());
  $user->save();
  // Drupal::messenger()->addMessage(t($webform_submission->id().' '.$entity->id()));
  //$variables['submissionurl'] = '/webform/registration/submissions/' . $webform_submission->id() . '/edit';
}

function oxfam_get_webform_node_submissions($nid)
{
  $storage = \Drupal::entityTypeManager()->getStorage('webform_submission');
  $webform_submission = $storage->loadByProperties([
    'entity_type' => 'node',
    'entity_id' => $nid,
  ]);
  $submission_data = array();
  foreach ($webform_submission as $submission) {
    $submission_data[] = $submission->getData();
  }
  return ($submission_data);
}

function oxfam_form_user_register_form_alter(&$form, &$form_state, $form_id)
{
  $form['actions']['submit']['#submit'][] = 'oxfam_user_register_submit_handler';
}

function oxfam_user_register_submit_handler($form, &$form_state)
{
  $form_state->setRedirect('entity.node.canonical', ['node' => 21]);
}

function oxfam_user_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
  if ($view_mode == 'full') {
    $user = User::load($entity->id());
    if (!$user->hasRole('administrator')) {
      $submission = $user->get('field_webform')->value;
      $webform_submission = WebformSubmission::load($submission);
      $data = $webform_submission->getData();
      if (($data['payment_status'] == 'Success')) {
        //$redirect = new RedirectResponse(Url::fromUserInput('/dashboard')->toString());
        $redirect = new RedirectResponse(Url::fromUserInput('/user')->toString());
      } else {
        $redirect = new RedirectResponse(Url::fromUserInput('/webform/registration/submissions/' . $submission . '/edit')->toString());
      }
      $redirect->send();
    }
  }
}

function oxfam_form_alter(&$form, &$form_state, $form_id)
{
  if (!empty($form['actions'])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($form_id == 'user_form' && $action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'oxfam_form_submit';
      }
    }
  }
  if ($form_id == 'webform_submission_registration_edit_form') {
    //print "<pre>";
    //print count($form['elements']['flexbox_07']['challenge_slot']['#options']);
    //print count($form['elements']['flexbox']['first_name']);
    //kint($form['elements']['flexbox_07']['challenge_slot']['#options']);

    foreach ($form['elements']['flexbox_07']['challenge_slot']['#options'] as $key => $value) {
      if ($key != 20) {
        $slotsActive[] = $key;
      }
    }
    //print_r($slotsActive);
    $form['elements']['flexbox_17']['active_slots']['#default_value'] = implode(',', $slotsActive);
    //print implode(",", $form['elements']['flexbox_07']['challenge_slot']['#options']);
    if (count($form['elements']['flexbox_07']['challenge_slot']['#options']) == 2) {
      $form['elements']['flexbox_07']['challenge_slot']['#options']['20'] = 'Both Slots';
    } else if (count($form['elements']['flexbox_07']['challenge_slot']['#options']) > 2) {
      $form['elements']['flexbox_07']['challenge_slot']['#options']['20'] = 'All Slots';
    }
    //kint($form['elements']['flexbox_07']['challenge_slot']['#options']);
    //print count($form['elements']['flexbox_07']['challenge_slot']['#options']);
    //print "</pre>";
  }
}

function oxfam_form_submit(array $form, &$form_state)
{
  $user = User::load(\Drupal::currentUser()->id());
  if (!$user->hasRole('administrator')) {
    $submission = $user->get('field_webform')->value;
    $webform_submission = WebformSubmission::load($submission);
    $data = $webform_submission->getData();
//    print "<pre>";
//    print_r($data);
//    print "<pre>";
    if (!empty($data['payment_status']) && ($data['payment_status'] == 'Success')) {
      $redirect = new RedirectResponse(Url::fromUserInput('/user')->toString());
    } else {
      $redirect = new RedirectResponse(Url::fromUserInput('/webform/registration/submissions/' . $submission . '/edit')->toString());
    }
    $redirect->send();
  }
}

function oxfam_preprocess_html(&$variables)
{
  //print $route_name = \Drupal::routeMatch()->getRouteName();
  //print \Drupal::service('path.current')->getPath();

  $route_name = \Drupal::routeMatch()->getRouteName();
  if (($route_name == 'view.frontpage.page_1') && !empty(\Drupal::currentUser()->id())) {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator')) {
      $submission = $user->get('field_webform')->value;
      $webform_submission = WebformSubmission::load($submission);
      $data = $webform_submission->getData();

      if (!empty($data['payment_status']) && ($data['payment_status'] == 'Success')) {
        //$redirect = new RedirectResponse(Url::fromUserInput('/dashboard')->toString());
        //$redirect->send();
      } else {
        $redirect = new RedirectResponse(Url::fromUserInput('/webform/registration/submissions/' . $submission . '/edit')->toString());
        $redirect->send();
      }
    }
  }
  if (!empty(\Drupal::currentUser()->id())) {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator')) {
      $submission = $user->get('field_webform')->value;
      $webform_submission = WebformSubmission::load($submission);
      $data = $webform_submission->getData();
      if (!empty($data['mailer']) && (\Drupal::service('path.current')->getPath() == '/node/7') && ($data['mailer'] == 'Unsuccessful')) {
        $webform_submission->setElementData('mailer', 'TEST');
        $webform_submission->save();
        $webform_submission->setElementData('mailer', '');
        $webform_submission->save();
      }
      if (!empty($data['mailer']) && (\Drupal::service('path.current')->getPath() == '/node/6') && ($data['mailer'] == 'Successful')) {
        $webform_submission->setElementData('mailer', 'TEST2');
        $webform_submission->save();
        $webform_submission->setElementData('mailer', '');
        $webform_submission->save();
      }
    }
  }
}

function oxfam_preprocess(&$variables)
{
  $variables['test'] = '';
  /* get active slots first*/
  $view1 = \Drupal\views\Views::getView('active_campaigns_for_paid_sign_ups');
  $view1->execute();
  $total_active_slots_data = $view1->result;

  /* put all active slots in an array to compare with slots which user does not paid for*/
  if (count($total_active_slots_data) > 0) {
    foreach ($total_active_slots_data as $data) {
      $entityData = $data->_entity;
      $activeSlotNid = $entityData->get('nid')->value;
      $activeSlotsAll[] = $activeSlotNid;
    }
  }

  /* get those slots for logged in user which are already there in paid webform  */
  $view2 = \Drupal\views\Views::getView('moreslotsforregistration');
  $view2->execute();
  $total_subscriptions = $view2->result;

  /* Paid Subscription */
  if (count($total_subscriptions) > 0) {
    foreach ($total_subscriptions as $data) {
      $entityData = $data->_entity;
      $slotNodeID = $entityData->getData()['challenge_slot'];
      $subscriptions[] = $slotNodeID;
    }
  }

  /* save all subscriptions into an array */
  if (count($total_subscriptions) > 0) {
    foreach ($total_active_slots_data as $activedata) {
      $entityData = $activedata->_entity;
      $activeSlotNid = $entityData->get('nid')->value;
      if (in_array($activeSlotNid, $subscriptions)) {
        foreach ($total_subscriptions as $subsdata) {
          $entityData = $subsdata->_entity;
          $slotSubsID = $entityData->getData()['challenge_slot'];
          $paymentStatus = $entityData->getData()['payment_status'];
          $submissionID = $entityData->get('sid')->value;
          if ($activeSlotNid == $slotSubsID) {
            if ($paymentStatus != 'Success') {
              $nodeme = \Drupal\node\Entity\Node::load($slotNodeID);
              if (!empty($submissionID)) {
                $pendingforpaid[] = array(
                  'slotid' => $slotNodeID,
                  'submissionid' => $submissionID,
                  'stitle' => $nodeme->getTitle(),
                );
              } else {
                $subid = '';
                $pendingforpaid[] = array(
                  'slotid' => $slotNodeID,
                  'submissionid' => $subid,
                  'stitle' => $nodeme->getTitle(),
                );
              }
            }
          }
        }
      } else {
        $nodeme = \Drupal\node\Entity\Node::load($activeSlotNid);
        $pendingforpaid[] = array(
          'slotid' => $activeSlotNid,
          'submissionid' => '',
          'stitle' => $nodeme->getTitle(),
        );
      }
    }
  } else {
    foreach ($activeSlotsAll as $data) {
      $nodeme = \Drupal\node\Entity\Node::load($data);
      $pendingforpaid[] = array(
        'slotid' => $data,
        'submissionid' => '',
        'stitle' => $nodeme->getTitle(),
      );
    }
  }
  $variables['test'] = $pendingforpaid;
}

function oxfam_node_insert(Drupal\Core\Entity\EntityInterface $entity)
{
  if ($entity->getType() == 'daily_activity') {
    $target_slot[] = $entity->field_slot->getString();
    $submissionID = $entity->field_slot->getString();
    $distance = $entity->field_distance->value;

    $paidSubscriberData = $entity->get('field_slot')->entity->getData();
    //$userIdSubscriber = $entity->get('field_slot')->entity->getCurrentUserId()[0];
    //print_r($paidSubscriberData);
    $challengeType = $paidSubscriberData['challenge_type'];

    $nodeSlot = \Drupal\node\Entity\Node::load($paidSubscriberData['challenge_slot']);
    $campaignTitle = $nodeSlot->getTitle();
    switch ($challengeType) {
      case '25km in 10 days':
        $distance_to_complete = 25;
        break;
      case '50km in 10 Days':
        $distance_to_complete = 50;
        break;
      case '100km in 10 days':
        $distance_to_complete = 100;
        break;
    }
    //print_r($userIdSubscriber);

    /* get view result and count and add distance and send email for day wise */
    $view = \Drupal\views\Views::getView('total_activities');
    if (is_object($view)) {
      $view->setArguments($target_slot);
    }
    $view->execute();

    $total_activites_result_with_daily_activity_data = $view->result;
    $total_activity_result_count = count($total_activites_result_with_daily_activity_data);

    //print_r($total_activites_result_with_daily_activity_data);
    //print_r($tatal_activity_result_count);

    //print_r($total_activites_result_with_daily_activity_data);
    $total_distance = 0;
    foreach ($total_activites_result_with_daily_activity_data as $data) {
      $entityData = $data->_entity;
      $distance = $entityData->get('field_distance')->value;
      //print $distance . "<br>";
      $total_distance = $total_distance + $distance;
    }
    //print $total_distance;
    $webform_submission = WebformSubmission::load($submissionID);
    $data = $webform_submission->getData();
    $webform_submission->setElementData('completed_distance', $total_distance);
    $webform_submission->save();

    $pending_distance = $distance_to_complete - $total_distance;
    /* Send daily activity email to user*/
    if ($total_activity_result_count > 0) {
      daymailer($total_activity_result_count, $distance, $total_distance, $pending_distance, $challengeType, $campaignTitle);
    }
    if ($total_distance > $distance_to_complete) {
      //completionmailer($total_activity_result_count, $distance, $total_distance, $pending_distance, $challengeType);
    }
  }
}

/**
 * Implements hook_mail().
 */
function oxfam_mail($key, &$message, $params)
{
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'activity_created':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['format'] = 'text/html';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['subject'] = t('Activity Day @title in event slot: @campaign', array('@title' => $params['dayNumber'], '@campaign' => $params['campaign']), $options);
      $message['body'][] = $params['message'];
      break;
    case 'campaign_completed':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Article created: @title', array('@title' => $params['node_title']), $options);
      $message['body'][] = $params['message'];
      break;
  }
}

function daymailer($dayNumber, $distance, $total_distance, $pending_distance, $challengeType, $campaignTitle)
{
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'oxfam';
  $key = 'activity_created';
  $to = \Drupal::currentUser()->getEmail();
  $params['message'] = $dayNumber . '&' . $distance . '&' . $total_distance . '&' . $pending_distance . '&' . $challengeType . '&' . $campaignTitle;
  $params['dayNumber'] = $dayNumber;
  $params['campaign'] = $campaignTitle;
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = true;

  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

  if ($result['result'] !== true) {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  } else {
    drupal_set_message(t('An email is sent to you, please check your inbox'));
  }
}


